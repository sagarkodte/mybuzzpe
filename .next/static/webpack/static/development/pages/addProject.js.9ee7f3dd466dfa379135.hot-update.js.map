{"version":3,"file":"static/webpack/static/development/pages/addProject.js.9ee7f3dd466dfa379135.hot-update.js","sources":["webpack:///./pages/addProject.js"],"sourcesContent":["import React from 'react';\nimport Select from 'react-select';\nimport Layout from '../Components/twoColumnLayout'\nimport axios from 'axios';\nimport Config from '../config';\nimport Link from 'next/link';\nimport category from '../Services/categoryService';\nimport business from '../Services/businessService';\nimport ReactTags from 'react-tag-autocomplete'\n\nexport default class extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            token: '',\n            businessName: '',\n            note: '',\n            addressLine1: '',\n            addressCity: '',\n            addressState: '',\n            addressPincode: '',\n            categoryType: 'Select Category Type',\n            category: 'Select Category',\n            subCategory: 'Select Sub Category',\n            budgetAmt: '',\n            businessTags: '',\n            categoryList: '',\n            subCategoryList: '',\n            subCategoryArray: [],\n            errors: {},\n            success: '',\n            error: '',\n            // new vars\n            categoryArray: [],\n            selectedOption: null,\n            subCategoryArray: [],\n            selectedSubOption: null,\n            projectCategory: [],\n            tags: [],\n            suggestions: [],\n            budgetType: [{ value: 'Monthly', label: 'Monthly' },\n            { value: 'Hourly', label: 'Hourly' }],\n            SelectedbudgetType: '',\n            services: '',\n            file: null,\n            showUploadFile: false,\n            projectID: '',\n            uploadError: ''\n        };\n    }\n\n    componentDidMount = () => {\n        if (localStorage.getItem('token') !== null) {\n            console.log('Data Available');\n            this.setState({ token: localStorage.getItem('token') }, function() {\n                console.log(this.state.token)\n            });\n        }\n        category.getMainCategories().then(res => {\n            let a = [];\n            res.data.forEach(function(item) {\n                a.push({ value: item.path, label: item.name });\n            });\n            this.setState({ categoryArray: a }, function() {\n                console.log(this.state.categoryArray);\n            });\n        }).catch(error => {\n            console.log('error 8', error)\n        });\n    }\n\n    handleDelete(i) {\n        const tags = this.state.tags.slice(0)\n        tags.splice(i, 1)\n        this.setState({ tags }, function() {\n            var array = []\n            this.state.tags.map((item, i) => {\n                array.push(item.name)\n                array.join(',')\n                console.log(array)\n                this.setState({ services: array })\n            })\n        })\n    }\n\n    handleAddition(tag) {\n        const tags = [].concat(this.state.tags, tag)\n        this.setState({ tags }, function() {\n            var array = []\n            this.state.tags.map((item, i) => {\n                array.push(item.name)\n                array.join(',')\n                console.log(array)\n                this.setState({ services: array })\n\n            })\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n    getAllskills = (query) => {\n        console.log(query)\n        axios.get(Config.url + '/api/business/getallskills?p=' + query).then(res => {\n            var cata = res.data.data;\n            const arr = cata;\n            const newResponse = arr.map((name, id) => ({ id, name }));\n            console.log(newResponse);\n            this.setState({ suggestions: newResponse })\n            //this.setState({ categories: cata });\n            //console.log(this.state.categories)\n        }).catch(error => {\n            return error;\n        });\n    }\n    handleCategoryChange = selectedOption => {\n        this.setState({ selectedOption }, function() {\n            category.getSubCategories(this.state.selectedOption.value).then(res => {\n                let a = [];\n                res.data.forEach(function(item) {\n                    a.push({ value: item.path, label: item.name });\n                });\n                this.setState({ subCategoryArray: a }, function() {\n                    console.log(this.state.subCategoryArray);\n                });\n            }).catch(error => {\n                console.log('error 8', error)\n            });\n        });\n    }\n    getBudgetType = (selectedOption) => {\n        console.log(selectedOption.value)\n        this.setState({ SelectedbudgetType: selectedOption.value })\n\n    }\n    handleSubCategoryChange = selectedOption => {\n        this.setState({ selectedSubOption: selectedOption });\n    }\n\n    handleValidation = () => {\n        let errors = {};\n        console.log(this.state.selectedOption);\n        if (!this.state.projectDescription) errors.projectDescription = 'This field is required';\n        if (!this.state.projectCategory) errors.projectCategory = 'This field is required';\n        if (!this.state.services) errors.services = 'This field is required';\n        if (!this.state.budgetAmt) errors.budgetAmt = 'This field is required';\n        if (!this.state.SelectedbudgetType) errors.SelectedbudgetType = 'This field is required';\n        if (!this.state.note) errors.note = 'This field is required';\n        if (!this.state.selectedOption) errors.selectedOption = 'This field is required';\n        if (!this.state.selectedSubOption) errors.selectedSubOption = 'This field is required';\n        if (Object.entries(errors).length > 0) {\n            this.setState({ errors });\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    addProject = () => {\n        if (this.handleValidation()) {\n\n            let cat = this.state.selectedOption;\n            let subCat = this.state.selectedSubOption;\n            let projectCategory = []\n            subCat.push(cat);\n            subCat.forEach(function(item) {\n                projectCategory.push(item.value);\n            });\n\n            this.setState({ projectCategory: projectCategory }, function() {\n                business.addProject({\n                    'description': this.state.projectDescription,\n                    'category': (this.state.projectCategory).toString(),\n                    'services': (this.state.services).toString(),\n                    'budget': this.state.budgetAmt,\n                    'budgetType': this.state.SelectedbudgetType,\n                    'note': this.state.note,\n                }, {\n                    headers: {\n                        'x-access-token': this.state.token\n                    }\n                }\n                ).then(res => {\n                    console.log('res3', res.data);\n                    this.setState({ projectID: res.data._id }, function() {\n                        console.log(this.state.projectID)\n                        this.setState({ showUploadFile: true }, function() {\n                            this.scrollToTop()\n                        })\n                    })\n\n\n                }).catch(err => {\n                    console.log('err3', err);\n                });\n            });\n        }\n    }\n    onSubmit = (e) => {\n        e.preventDefault()\n        if (this.state.file) {\n            this.uploadFile(this.state.file);\n        } else {\n            this.setState({ uploadError: 'File is required.' })\n        }\n    }\n    onChange = (e) => {\n        this.setState({ file: e.target.files[0] })\n    }\n\n    uploadFile = (file) => {\n        const formData = new FormData();\n        formData.append('sampleFile', file)\n        formData.append('projectId', this.state.projectID)\n        axios.post(Config.url + '/api/project/uploadfile', formData, {\n            headers: {\n                'content-type': 'multipart/form-data',\n                'x-access-token': this.state.token\n            }\n        }).then(res => {\n            console.log(res);\n            this.setState({ uploadError: res.message })\n\n        }).catch(error => {\n            // return error;\n            console.log(error);\n        });\n    }\n    scrollToTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth',\n        });\n    }\n\n    render() {\n\n        return (<Layout>\n            <div className=\"page-content\">\n                <div className=\"inner-box\">\n                    <div className=\"dashboard-box d-sm-flex align-items-center justify-content-between \">\n                        <h2 className=\"dashbord-title\">Add new project</h2>\n                        {/* <Link href=\"addProject\"><a data-toggle=\"modal\"  className=\"d-none d-sm-inline-block btn btn-sm btn-common shadow-sm\"><i className=\"lni-plus\" /> Create</a></Link> */}\n                    </div>\n                    <div ref={(el) => { this.uploadDiv = el; }} class=\"dashboard-wrapper\" id=\"business-list\"></div>\n                    {this.state.showUploadFile ? '' : <div className=\"col-md-12 col-sm-12 col-sx-12\">\n                        <div className=\"form-group mb-3\">\n                            <label className=\"control-label\">Project Description</label>\n                            <textarea className=\"form-control\" placeholder=\"\" name=\"projectDescription\" value={this.state.projectDescription} onChange={this.handleChange} rows={3} data-error=\"Write your message\" required />\n                            <p style={{ color: 'red' }}>{this.state.errors.projectDescription}</p>\n                        </div>\n                        <div className=\"form-group mb-3\">\n                            <label className=\"control-label\">Select Category:</label>\n                            <Select onChange={this.handleCategoryChange} options={this.state.categoryArray} />\n                            <p style={{ color: 'red' }}>{this.state.errors.selectedOption}</p>\n                        </div>\n                        <div className=\"form-group mb-3\">\n                            <label className=\"control-label\">Select Sub Category:</label>\n                            <Select value={this.state.selectedSubOption} isMulti onChange={(...args) => this.handleSubCategoryChange(...args)} options={this.state.subCategoryArray} />\n                            <p style={{ color: 'red' }}>{this.state.errors.selectedSubOption}</p>\n                        </div>\n                        <div className=\"form-group mb-3\">\n                            <label className=\"control-label\">Add Skills *</label>\n                            <ReactTags\n                                handleInputChange={this.getAllskills}\n                                minQueryLength={1}\n                                tags={this.state.tags}\n                                suggestions={this.state.suggestions}\n                                handleDelete={this.handleDelete.bind(this)}\n                                handleAddition={this.handleAddition.bind(this)} />\n                            <p style={{ color: 'red' }}>{this.state.errors.services}</p>\n                        </div>\n                        <div className=\"form-group mb-3\">\n                            <label className=\"control-label\">Budget</label>\n                            <input className=\"form-control input-md\" name=\"budgetAmt\" value={this.state.budgetAmt} type=\"number\" onChange={this.handleChange} />\n                            <p style={{ color: 'red' }}>{this.state.errors.budgetAmt}</p>\n                        </div>\n                        <div className=\"form-group mb-3\">\n                            <label className=\"control-label\">Budget Type</label>\n                            <Select onChange={this.getBudgetType} options={this.state.budgetType} />\n                            <p style={{ color: 'red' }}>{this.state.errors.SelectedbudgetType}</p>\n                        </div>\n                        <div className=\"form-group mb-3\">\n                            <label className=\"control-label\">Note</label>\n                            <textarea className=\"form-control\" placeholder=\"\" name=\"note\" value={this.state.note} onChange={this.handleChange} rows={3} data-error=\"Write your message\" required />\n                            <p style={{ color: 'red' }}>{this.state.errors.note}</p>\n                        </div>\n\n                        {this.state.success !== '' ? <div className=\"alert alert-success\">\n                            {this.state.success}\n                        </div> : ''}\n                        {this.state.error ? <div className=\"alert alert-danger\">\n                            {this.state.error}\n                        </div> : ''}\n                        <button className=\"btn btn-common\" type=\"button\" onClick={this.addProject}>Submit</button>\n                        <button className=\"btn btn-common\" type=\"button\" onClick={this.onCanel}>Cancel</button>\n                    </div>}\n                    {this.state.showUploadFile ? <div className=\"col-md-12 col-sm-12 col-sx-12\"><div className=\"form-group mb-3\">\n                        <label className=\"control-label\">Add Project Related File</label>\n                        <form onSubmit={this.onSubmit}>\n                            <input className=\"type_file\" type=\"file\" onChange={this.onChange} />\n                            <button className=\"btn btn-common\" type=\"submit\">Upload File</button>\n                        </form>\n                        <p style={{ color: 'red' }}>{this.state.uploadError}</p>\n                    </div></div> : ''}\n                </div>\n            </div>\n        </Layout>);\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyCA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA;AAyFA;AACA;AACA;AA3FA;AA4FA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAzGA;AA0GA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxHA;AAyHA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AA7HA;AA8HA;AAAA;AAAA;AACA;AACA;AAhIA;AAkIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnJA;AAqJA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AADA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AA5LA;AA6LA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AApMA;AAqMA;AAAA;AAAA;AACA;AACA;AAvMA;AAyMA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AA1NA;AA2NA;AACA;AACA;AAFA;AAIA;AACA;AA9NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AA2BA;AAAA;AAAA;AACA;AAAA;AAAA;AA9BA;AAsCA;AACA;;;AAqBA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;AA2IA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA3SA;AACA;;;;;A","sourceRoot":""}